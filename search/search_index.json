{
    "docs": [
        {
            "location": "/",
            "text": "Welcome to SAFE docs\n\n\nWelcome to the SAFE documentation site! This site contains all the documentation you'll need to quickly starting creating SAFE apps in F#. If you've not heard of SAFE before, please feel free to start with the \nintroduction\n. Alternatively, you can immediately try out the \nquick started\n guide and tutorial, or simply browse through the documentation.\n\n\nIf there's anything missing from here, please feel free to add the documentation directly (or supply an issue) to the \nGitHub repository\n.\n\n\nWe hope you enjoy using SAFE as much as we do!\n\n\nThe SAFE team.",
            "title": "Home"
        },
        {
            "location": "/#welcome-to-safe-docs",
            "text": "Welcome to the SAFE documentation site! This site contains all the documentation you'll need to quickly starting creating SAFE apps in F#. If you've not heard of SAFE before, please feel free to start with the  introduction . Alternatively, you can immediately try out the  quick started  guide and tutorial, or simply browse through the documentation.  If there's anything missing from here, please feel free to add the documentation directly (or supply an issue) to the  GitHub repository .  We hope you enjoy using SAFE as much as we do!  The SAFE team.",
            "title": "Welcome to SAFE docs"
        },
        {
            "location": "/intro/",
            "text": "What is SAFE?\n\n\nThe SAFE stack is an \nopen-source, free, flexible\n end-to-end, \nfunctional-first\n stack for \ncloud-ready web applications\n that emphasizes \ntype-safe programming\n.\n\n\nThe SAFE stack allows you to \ndevelop client/server web applications almost entirely in \nF#\n, without needing to compromise and shoehorn your codebase into an object-oriented framework or library, and without needing you to be an expert in CSS or HTML to create compelling, rich client-side web applications.\n\n\nThe SAFE stack is made up of four components:\n\n\n\n\nA \nweb server\n running on .NET Core for hosting back-end services in F#\n\n\nA \nhosting platform\n that provides simple, scalable deployment models plus associated platform services for application developers\n\n\nA mechanism to run F# in the web browser for \nclient-side delivery of F#\n\n\nAn F# programming model for \nclient-side user interfaces\n\n\n\n\nWhy SAFE?\n\n\nSAFE provides developers with a simple and consistent programming model for developing rich, scalable web-enabled applications that can run on multiple platforms. SAFE takes advantage of F#'s mix of a functional-first experience backed by the powerful and mature .NET framework to provide a type-safe, reliable experience that leads to the \"pit of success\".\n\n\n\n\nCreate client / server applications entirely in F#\n\n\nRe-use development skills on client and server\n\n\nRapidly create rich client-side web applications with no Javascript knowledge\n\n\nRuns on the latest .NET Core\n\n\nRapid development cycle with support for hot module reloading\n\n\nInteract with native Javascript libraries whenever needed\n\n\nCreate client-side applications purely in F#, with full type checking for safety\n\n\nSeamlessly share code between client and server",
            "title": "Introduction"
        },
        {
            "location": "/intro/#what-is-safe",
            "text": "The SAFE stack is an  open-source, free, flexible  end-to-end,  functional-first  stack for  cloud-ready web applications  that emphasizes  type-safe programming .  The SAFE stack allows you to  develop client/server web applications almost entirely in  F# , without needing to compromise and shoehorn your codebase into an object-oriented framework or library, and without needing you to be an expert in CSS or HTML to create compelling, rich client-side web applications.  The SAFE stack is made up of four components:   A  web server  running on .NET Core for hosting back-end services in F#  A  hosting platform  that provides simple, scalable deployment models plus associated platform services for application developers  A mechanism to run F# in the web browser for  client-side delivery of F#  An F# programming model for  client-side user interfaces",
            "title": "What is SAFE?"
        },
        {
            "location": "/intro/#why-safe",
            "text": "SAFE provides developers with a simple and consistent programming model for developing rich, scalable web-enabled applications that can run on multiple platforms. SAFE takes advantage of F#'s mix of a functional-first experience backed by the powerful and mature .NET framework to provide a type-safe, reliable experience that leads to the \"pit of success\".   Create client / server applications entirely in F#  Re-use development skills on client and server  Rapidly create rich client-side web applications with no Javascript knowledge  Runs on the latest .NET Core  Rapid development cycle with support for hot module reloading  Interact with native Javascript libraries whenever needed  Create client-side applications purely in F#, with full type checking for safety  Seamlessly share code between client and server",
            "title": "Why SAFE?"
        },
        {
            "location": "/overview/",
            "text": "The SAFE acronym is made up of four separate components:\n\n\n\n\nS\naturn for back-end services in F#\n\n\nA\nzure as a hosting platform plus associated platform services\n\n\nF\nable for running F# in the web browser\n\n\nE\nlmish for client-side user interfaces\n\n\n\n\nSaturn\n\n\nThe \nGiraffe\n framework provides an F#-friendly, flexible pipeline for creating server-side web applications, built on top of ASP .NET Core - a high performance, rock-solid web server. The Saturn library builds on top of this solid foundation, and provides a set of \noptional\n abstractions which make configuring web applications and constructing complex routes extremely easy to achieve.\n\n\nBoth Saturn and Giraffe can host RESTful API endpoints, or drive static websites, or server-generated content, all inside an easy-to-learn functional programming model.\n\n\nMicrosoft Azure\n\n\nAzure is a comprehensive set of cloud services that developers and IT professionals use to build, deploy and manage applications through a global network of data centres. Integrated tools, DevOps and a marketplace support you in efficiently building anything from simple mobile apps to Internet-scale solutions.\n\n\nFable\n\n\nFable is an F# to JavaScript compiler powered by Babel, designed to produce readable and standard code. Fable allows you to create applications for the browser written entirely in F#, whilst also allowing you to interact with native Javascript as needed.\n\n\nElmish\n\n\nThe Elmish model allows you to construct user interfaces running in the browser using a functional programming model. Modelled on the Elm application model, Elmish uses the Model-View-Update paradigm to allow you to write applications that are simple to reason about. Elmish sits on top of the \nReact\n framework.\n\n\nAre there alternative components in the SAFE stack?\n\n\nYes, absolutely. The above components are what we recommended as the default SAFE stack, but you can of course replace the components with alternatives as you see fit. Here are some examples:\n\n\n\n\nSuave\n is a complete web server and programming model designed for F# that is similar to that of Giraffe.\n\n\nFreya\n is an alternative F#-first web stack which has a pluggable runtime model which allows it to be hosted in a variety of web servers including ASP .NET Core.\n\n\nAWS\n is Amazon's cloud compute offering, providing a large number of services available globally.\n\n\nWebSharper\n is a complete end-to-end programming stack, comprising both server- and client-side components. It supports both F# and C# programming models.",
            "title": "SAFE Stack Overview"
        },
        {
            "location": "/overview/#saturn",
            "text": "The  Giraffe  framework provides an F#-friendly, flexible pipeline for creating server-side web applications, built on top of ASP .NET Core - a high performance, rock-solid web server. The Saturn library builds on top of this solid foundation, and provides a set of  optional  abstractions which make configuring web applications and constructing complex routes extremely easy to achieve.  Both Saturn and Giraffe can host RESTful API endpoints, or drive static websites, or server-generated content, all inside an easy-to-learn functional programming model.",
            "title": "Saturn"
        },
        {
            "location": "/overview/#microsoft-azure",
            "text": "Azure is a comprehensive set of cloud services that developers and IT professionals use to build, deploy and manage applications through a global network of data centres. Integrated tools, DevOps and a marketplace support you in efficiently building anything from simple mobile apps to Internet-scale solutions.",
            "title": "Microsoft Azure"
        },
        {
            "location": "/overview/#fable",
            "text": "Fable is an F# to JavaScript compiler powered by Babel, designed to produce readable and standard code. Fable allows you to create applications for the browser written entirely in F#, whilst also allowing you to interact with native Javascript as needed.",
            "title": "Fable"
        },
        {
            "location": "/overview/#elmish",
            "text": "The Elmish model allows you to construct user interfaces running in the browser using a functional programming model. Modelled on the Elm application model, Elmish uses the Model-View-Update paradigm to allow you to write applications that are simple to reason about. Elmish sits on top of the  React  framework.",
            "title": "Elmish"
        },
        {
            "location": "/overview/#are-there-alternative-components-in-the-safe-stack",
            "text": "Yes, absolutely. The above components are what we recommended as the default SAFE stack, but you can of course replace the components with alternatives as you see fit. Here are some examples:   Suave  is a complete web server and programming model designed for F# that is similar to that of Giraffe.  Freya  is an alternative F#-first web stack which has a pluggable runtime model which allows it to be hosted in a variety of web servers including ASP .NET Core.  AWS  is Amazon's cloud compute offering, providing a large number of services available globally.  WebSharper  is a complete end-to-end programming stack, comprising both server- and client-side components. It supports both F# and C# programming models.",
            "title": "Are there alternative components in the SAFE stack?"
        },
        {
            "location": "/quickstart/",
            "text": "This page provides some basic guidance on getting up and running with your first SAFE application.\n\n\nInstall pre-requisites\n\n\nYou'll need to install the following pre-requisites in order to build SAFE applications\n\n\n\n\nThe \n.NET Core SDK 2.x\n.\n\n\nThe \nYarn\n package manager.\n\n\nNode 8.x\n installed for the front end components.\n\n\nIf you're running on OSX or Linux, you'll also need to install \nMono\n.\n\n\n\n\nInstall an F# code editor\n\n\nYou'll also want an IDE to create F# applications. We recommend one of the following great IDEs.\n\n\n\n\nVS Code\n + \nIonide\n extension\n\n\nVisual Studio 2017\n\n\nJetbrains Rider\n\n\n\n\nCreate your first SAFE app\n\n\n\n\nCreate a new directory on your machine\n\n\nOpen a command prompt\n\n\nEnter \ndotnet new -i SAFE.Template\n to install the \nSAFE project template\n (you only need to do this once!)\n\n\nEnter \ndotnet new SAFE -lang F#\n to create a new SAFE project\n\n\nEnter \nbuild.cmd run\n (Windows) or \n./build.sh run\n (Linux / OSX)\n\n\n\n\nCongratulations! After a short delay, you'll be presented with a SAFE application running in your browser!",
            "title": "Quick Start"
        },
        {
            "location": "/quickstart/#install-pre-requisites",
            "text": "You'll need to install the following pre-requisites in order to build SAFE applications   The  .NET Core SDK 2.x .  The  Yarn  package manager.  Node 8.x  installed for the front end components.  If you're running on OSX or Linux, you'll also need to install  Mono .",
            "title": "Install pre-requisites"
        },
        {
            "location": "/quickstart/#install-an-f-code-editor",
            "text": "You'll also want an IDE to create F# applications. We recommend one of the following great IDEs.   VS Code  +  Ionide  extension  Visual Studio 2017  Jetbrains Rider",
            "title": "Install an F# code editor"
        },
        {
            "location": "/quickstart/#create-your-first-safe-app",
            "text": "Create a new directory on your machine  Open a command prompt  Enter  dotnet new -i SAFE.Template  to install the  SAFE project template  (you only need to do this once!)  Enter  dotnet new SAFE -lang F#  to create a new SAFE project  Enter  build.cmd run  (Windows) or  ./build.sh run  (Linux / OSX)   Congratulations! After a short delay, you'll be presented with a SAFE application running in your browser!",
            "title": "Create your first SAFE app"
        },
        {
            "location": "/learning/",
            "text": "This section contains useful repositories that allow you to learn more about the SAFE stack, at your own pace.\n\n\nSAFE Dojo\n\n\nThe \nSAFE Dojo\n is a guided set of tasks designed to give you hands-on experience with the client and server components of the SAFE stack. You'll create server-side routes, client side UI and shared validation logic as you create a mashup application to provide details on UK locations.\n\n\nThe dojo takes around 90 minutes to complete if you have never worked with the stack before.\n\n\nExample repositories\n\n\nThe following example repositories (and more!) can be found in the official \nSAFE Stack\n organisational GitHub page.\n\n\nSAFE Bookstore\n\n\nThe \nSAFE Bookstore\n demonstrates many of the useful features of a larger SAFE application, including login authentication using JWT tokens, automated deployment via Docker and SEO support with urls for pages. It also includes an example of using Azure Storage tables as a persistence store.\n\n\nSAFE ConfPlanner\n\n\nThe \nSAFE ConfPlanner\n demonstrates how to build and share a complex domain model in SAFE across client and server, along with the use of websockets for a \"reactive\" UI support push notifications. It also demonstrates the use of F#'s flexible mailbox processors to implement an event-driven architecture.\n\n\nSAFE Search\n\n\nThe \nSAFE Search\n repository shows how to use Azure services to implement a SAFE application that supports searching over multiple data sources with support for find-ahead typing and throttling. The application uses a combination of Azure Search and Azure Storage Tables to construct a large search index that can rapidly find results in a number of ways.\n\n\nSAFE Chat\n\n\nThe \nSAFE Chat\n application is a real-time chat application built on SAFE that uses the \nAKKA framework\n to manage actors that represent chat users, including Akka Streams and the Akkling F# library.\n\n\nMobile SAFE\n\n\nThe \nSAFE Nightwatch\n app is a sample mobile application using the \nReact Native\n library, built on top of the SAFE stack. React Native permits a very similar programming when writing SAFE applications as browser applications, so the experience should be very familiar to you.",
            "title": "Learning Resources"
        },
        {
            "location": "/learning/#safe-dojo",
            "text": "The  SAFE Dojo  is a guided set of tasks designed to give you hands-on experience with the client and server components of the SAFE stack. You'll create server-side routes, client side UI and shared validation logic as you create a mashup application to provide details on UK locations.  The dojo takes around 90 minutes to complete if you have never worked with the stack before.",
            "title": "SAFE Dojo"
        },
        {
            "location": "/learning/#example-repositories",
            "text": "The following example repositories (and more!) can be found in the official  SAFE Stack  organisational GitHub page.",
            "title": "Example repositories"
        },
        {
            "location": "/learning/#safe-bookstore",
            "text": "The  SAFE Bookstore  demonstrates many of the useful features of a larger SAFE application, including login authentication using JWT tokens, automated deployment via Docker and SEO support with urls for pages. It also includes an example of using Azure Storage tables as a persistence store.",
            "title": "SAFE Bookstore"
        },
        {
            "location": "/learning/#safe-confplanner",
            "text": "The  SAFE ConfPlanner  demonstrates how to build and share a complex domain model in SAFE across client and server, along with the use of websockets for a \"reactive\" UI support push notifications. It also demonstrates the use of F#'s flexible mailbox processors to implement an event-driven architecture.",
            "title": "SAFE ConfPlanner"
        },
        {
            "location": "/learning/#safe-search",
            "text": "The  SAFE Search  repository shows how to use Azure services to implement a SAFE application that supports searching over multiple data sources with support for find-ahead typing and throttling. The application uses a combination of Azure Search and Azure Storage Tables to construct a large search index that can rapidly find results in a number of ways.",
            "title": "SAFE Search"
        },
        {
            "location": "/learning/#safe-chat",
            "text": "The  SAFE Chat  application is a real-time chat application built on SAFE that uses the  AKKA framework  to manage actors that represent chat users, including Akka Streams and the Akkling F# library.",
            "title": "SAFE Chat"
        },
        {
            "location": "/learning/#mobile-safe",
            "text": "The  SAFE Nightwatch  app is a sample mobile application using the  React Native  library, built on top of the SAFE stack. React Native permits a very similar programming when writing SAFE applications as browser applications, so the experience should be very familiar to you.",
            "title": "Mobile SAFE"
        },
        {
            "location": "/support/",
            "text": "The following companies provide commercial training, support, consultancy and development services for SAFE Stack applications.\n\n\nCompositional IT\n\n\n\n\nCompositional IT are experts in designing functional-first, cloud-ready systems, offering consultancy and support, training and development. Run by an F# MVP and well-known member of the .NET community, they are dedicated to raising awareness of the benefits of both functional programming and harnessing the power of the cloud to deliver high-quality, low-cost solutions.\n\n\nLambda Factory\n\n\n\n\nLambda Factory is a consulting company specializing in designing and building complex systems using Functional Programming languages such as F#, Elm and Elixir. It also offers help with introducing functional programming and open source driven development to the organization, as well as trainings, workshops and mentoring. Founded by open source contributor and well-known member of F# Community, Lambda Factory has been committed to supporting F# Community and helping it grow.\n\n\nThe F# Community\n\n\nThe SAFE stack was written largely by the community as open source projects, such as Saturn, Giraffe, Fable and Elmish (as well as the alternative elements within the stack). All those teams are always happy to contribute and help out.\n\n\nSocial\n\n\nYou can also reach out to the SAFE team on @safe_stack or on the regular F# channels on Slack: either the official F# Foundation or on the Functional Programming Slack. We'll be expanding this over time.",
            "title": "Support"
        },
        {
            "location": "/support/#compositional-it",
            "text": "Compositional IT are experts in designing functional-first, cloud-ready systems, offering consultancy and support, training and development. Run by an F# MVP and well-known member of the .NET community, they are dedicated to raising awareness of the benefits of both functional programming and harnessing the power of the cloud to deliver high-quality, low-cost solutions.",
            "title": "Compositional IT"
        },
        {
            "location": "/support/#lambda-factory",
            "text": "Lambda Factory is a consulting company specializing in designing and building complex systems using Functional Programming languages such as F#, Elm and Elixir. It also offers help with introducing functional programming and open source driven development to the organization, as well as trainings, workshops and mentoring. Founded by open source contributor and well-known member of F# Community, Lambda Factory has been committed to supporting F# Community and helping it grow.",
            "title": "Lambda Factory"
        },
        {
            "location": "/support/#the-f-community",
            "text": "The SAFE stack was written largely by the community as open source projects, such as Saturn, Giraffe, Fable and Elmish (as well as the alternative elements within the stack). All those teams are always happy to contribute and help out.",
            "title": "The F# Community"
        },
        {
            "location": "/support/#social",
            "text": "You can also reach out to the SAFE team on @safe_stack or on the regular F# channels on Slack: either the official F# Foundation or on the Functional Programming Slack. We'll be expanding this over time.",
            "title": "Social"
        },
        {
            "location": "/testimonials/",
            "text": "Feedback & Testimonials\n\n\nPlease feel free to submit a PR to add testimonials to this page!",
            "title": "Testimonials"
        },
        {
            "location": "/testimonials/#feedback-testimonials",
            "text": "Please feel free to submit a PR to add testimonials to this page!",
            "title": "Feedback &amp; Testimonials"
        }
    ]
}